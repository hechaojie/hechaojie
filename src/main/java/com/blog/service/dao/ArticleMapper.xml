<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blog.service.dao.ArticleDao">

	<resultMap id="article" type="Article">
		<id property="id" column="id"/>
		<result property="userId" column="user_id"/>
		<result property="title" column="title"/>
		<result property="type" column="type"/>
		<result property="commentCount" column="comment_count"/>
		<result property="recommend" column="recommend"/>
		<result property="permission" column="permission"/>
		<result property="isDelete" column="is_delete"/>
		<result property="createAt" column="create_at"/>
		<result property="updateAt" column="update_at"/>
	</resultMap>
	
	<resultMap id="articleVo" type="ArticleVo">
		<id property="id" column="id"/>
		<result property="userId" column="user_id"/>
		<result property="email" column="email"/>
		<result property="username" column="username"/>
		<result property="title" column="title"/>
		<result property="content" column="content"/>
		<result property="type" column="type"/>
		<result property="commentCount" column="comment_count"/>
		<result property="recommend" column="recommend"/>
		<result property="createAt" column="create_at"/>
		<result property="updateAt" column="update_at"/>
	</resultMap>
	
    <select id="findAll" resultMap="article">
            select * from article
    </select>
    
    <select id="findArticlesByConditions" resultMap="articleVo" >
    	select a.*,u.email,u.username from article a left join user u on (u.id = a.user_id) where 1=1
    	<if test="sqlParams.title != null">
    		and a.title like #{sqlParams.title}
    	</if>
    	<if test="sqlParams.id != null">
    		and a.id = #{sqlParams.id}
    	</if>
    	<if test="sqlParams.type != null">
    		and a.type = #{sqlParams.type}
    	</if>
    	<if test="sqlParams.userId != null">
    		and a.user_id = #{sqlParams.userId}
    	</if>
    	<if test="sqlParams.permission != null">
    		and a.permission = #{sqlParams.permission}
    	</if>
    	<if test="sqlParams.isDelete != null">
    		and a.is_delete = #{sqlParams.isDelete}
    	</if>
    	<if test="sqlParams.startTime != null">
    		and a.create_at &gt;= #{sqlParams.startTime}
    	</if>
    	<if test="sqlParams.endTime!= null">
    		and a.create_at &lt;= #{sqlParams.endTime}
    	</if>
    	order by a.recommend desc,a.create_at desc
    	limit #{start},#{size}
    </select>
    
    <select id="totalArticlesByConditions" parameterType="Map" resultType="Long">
    	select count(*) from article a where 1=1
    	<if test="sqlParams.title != null">
    		and a.title like #{sqlParams.title}
    	</if>
    	<if test="sqlParams.id != null">
    		and a.id = #{sqlParams.id}
    	</if>
    	<if test="sqlParams.type != null">
    		and a.type = #{sqlParams.type}
    	</if>
    	<if test="sqlParams.userId != null">
    		and a.user_id = #{sqlParams.userId}
    	</if>
    	<if test="sqlParams.permission != null">
    		and a.permission = #{sqlParams.permission}
    	</if>
    	<if test="sqlParams.isDelete != null">
    		and a.is_delete = #{sqlParams.isDelete}
    	</if>
    	<if test="sqlParams.startTime != null">
    		and a.create_at &gt;= #{sqlParams.startTime}
    	</if>
    	<if test="sqlParams.endTime!= null">
    		and a.create_at &lt;= #{sqlParams.endTime}
    	</if>
    	order by a.create_at desc
    </select>
    
    <select id="findArticleById" parameterType="String" resultMap="article">
    	select * from article a where a.id = #{id}
    </select>
    
    <insert id="save" parameterType="Article">
		insert into article(id,user_id,title,type,comment_count,recommend,permission,is_delete,create_at,update_at) 
		values(#{id},#{userId},#{title},#{type},#{commentCount},#{recommend},#{permission},#{isDelete},#{createAt},#{updateAt}) 
    </insert>
    
    <update id="update" parameterType="Article">
    	update article set title=#{title},type=#{type},permission=#{permission},update_at=#{updateAt} where id = #{id}
    </update>
    
    <select id="findArticleByIds" resultMap="articleVo" parameterType="java.util.List">
		select a.*,u.email,u.nickname,ac.content from article a 
		left join user u on (u.id = a.user_id)
		left join article_content ac on (ac.article_id=a.id)
		where 1=1
    	and a.id in 
    	<foreach collection="ids" item="id" separator="," open="(" close=")">
    		#{id}
    	</foreach>
    </select>
    
    
</mapper>